#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Apr 30 11:50:54 2017

@author: batsukhbaatar
"""

class box_cox:
    
    def __init__(self, lmbd = None):
        self.lmbd = lmbd
        
    def fit_transform(self, x):
        
        if len(x.shape) == 1:
            
            from scipy.stats import boxcox
            import pandas as pd
            
            dum = boxcox(x)
            self.lmbd = dum[1]
            
            return(dum[0])
        
        else:
            from scipy.stats import boxcox
            import pandas as pd
            
            duml = []
            dum = pd.DataFrame()
            
            for i in x.columns:
                
                b1 = boxcox(x[i])
                dum[i] = b1[0]
                duml.append(b1[1])
                
            self.lmbd = duml
            
            return(dum)
        
    def inverse(self, x):
        
        if len(x.shape) == 1:
            
            import numpy as np
            import pandas as pd
            
            if self.lmbd == 0:
                return(np.exp(x))
            else:
                return(x*self.lmbd + 1)**(1/self.lmbd)
            
        else:
            import numpy as np
            import pandas as pd
            
            dum = pd.DataFrame()
            
            for i,j in zip(x.columns, self.lmbd):
                
                if j == 0:
                    dum[i] = np.exp(x[i])
                else:
                    dum[i] = (x[i] * j + 1)**(1/j)
            
            return(dum)
        
    def transform(self, x):
        
        if len(x.shape) == 1:
            
            import pandas as pd
            from scipy.stats import boxcox
            
            return(pd.Series(boxcox(x, self.lmbd)))
            
        else:
            import pandas as pd
            from scipy.stats import boxcox
            
            dum = pd.DataFrame()
            
            for i,j in zip(x.columns, self.lmbd):
                dum[i] = boxcox(x[i], lmbda = j)
            
            return dum
                
    
