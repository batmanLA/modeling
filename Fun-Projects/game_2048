#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar  4 20:27:23 2017

@author: batsukhbaatar
"""

import numpy as np

def handle_0s(x, direction = 'left'):   ### function to move nonzero elements to the right or left
    
    if direction == 'left':
            
        (dum, ) = np.where(x == 0)
        x = np.delete(x, dum)
        x = np.append(x, np.array([0 for _ in range(4-len(x))]))
        return x
    
    elif direction == 'right':
        
        (dum, ) = np.where(x == 0)
        x = np.delete(x, dum)
        x = np.append(np.array([0 for _ in range(4-len(x))]), x)
        return x
    
    else:
        print('check input/n')
    

def game2048():

    x = np.zeros((4,4), dtype = int)    #### Preparing data
    dum = np.random.choice(range(16), 2, replace = False)
    
    for i in dum:
        row = int(i / 4)
        col = i % 4
        x[row, col] = 2
        x[row, col] = 2
    
    while True:     ####  Game begins here
        
        print(x)
        print('\n')
        
        direction = input('left or right or up or down? (Dont use quote): ')
        
        if direction == 'left':
            
            dum1 = x.copy()
            
            for i in np.arange(4):
                
                dum = handle_0s(x[i, :].copy(), 'left')
                
                for j in np.arange(3):
                    
                    if dum[j] == dum[j + 1] and dum[j] > 0:
                        dum[j] = dum[j].copy() + dum[j + 1].copy()
                        dum[j + 1] = 0
                        dum = handle_0s(dum.copy(), 'left')
                
                x[i, :] = dum.copy()
            
            while True:            
                new_pop = np.random.choice(range(16))
                
                if x[int(new_pop / 4), new_pop % 4] == 0: 
                    
                    x[int(new_pop / 4), new_pop % 4] = np.random.choice([2, 4], size = 1, p = [0.9, 0.1])
                    break
            
        
        elif direction == 'right':
            
            dum1 = x.copy()
            
            for i in np.arange(4):
                
                dum = handle_0s(x[i, :].copy(), 'right')
                
                for j in np.arange(3,0,-1):
                    
                    if dum[j] == dum[j-1] and dum[j] > 0:
                        dum[j] = dum[j].copy() + dum[j-1].copy()
                        dum[j-1] = 0
                        dum = handle_0s(dum.copy(), 'right')
                        
                x[i, :] = dum.copy()
                        
            while True:            
                new_pop = np.random.choice(range(16))
                
                if x[int(new_pop / 4), new_pop % 4] == 0: 
                    
                    x[int(new_pop / 4), new_pop % 4] = np.random.choice([2, 4], size = 1, p = [0.9, 0.1])
                    break
        
        elif direction == 'up':
            
            dum1 = x.copy()
            
            for i in np.arange(4):
                
                dum = handle_0s(x[:, i].copy(), 'left')
                
                for j in np.arange(3):
                    
                    if dum[j] == dum[j + 1] and dum[j] > 0:
                        dum[j] = dum[j].copy() + dum[j + 1].copy()
                        dum[j + 1] = 0
                        dum = handle_0s(dum.copy(), 'left')
                
                x[:, i] = dum.copy()
                        
            while True:            
                new_pop = np.random.choice(range(16))
                
                if x[int(new_pop / 4), new_pop % 4] == 0: 
                    
                    x[int(new_pop / 4), new_pop % 4] = np.random.choice([2, 4], size = 1, p = [0.9, 0.1])
                    break
        
        elif direction == 'down':
            
            dum1 = x.copy()
            
            for i in np.arange(4):
                
                dum = handle_0s(x[:, i].copy(), 'right')
                
                for j in np.arange(3, 0, -1):
                    
                    if dum[j] == dum[j-1] and dum[j] > 0:
                        dum[j] = dum[j].copy() + dum[j-1].copy()
                        dum[j-1] = 0
                        dum = handle_0s(dum.copy(), 'right')
                
                x[:, i] = dum.copy()
                
            while True:            
                new_pop = np.random.choice(range(16))
                
                if x[int(new_pop / 4), new_pop % 4] == 0: 
                    
                    x[int(new_pop / 4), new_pop % 4] = np.random.choice([2, 4], size = 1, p = [0.9, 0.1])
                    break
            
        elif direction == 'break':
            
            print('User exited the game')
            break
            
        else:
            dum1 = x.copy() + 1
            print('Insert correct direction\n')
            
        
        if np.all(dum1 == x):
            print('You lost, please try again/n')
            break
                
        elif np.max(x) == 2048:
            print('Congragulations, you won the game/n')
            break
        else:
            pass
        
    return None

game2048()
