#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 22 23:30:14 2017

@author: batsukhbaatar
"""

import pandas as pd
import os
import re

df = pd.read_csv(r'/Users/batsukhbaatar/Desktop/Sample_Problem/Interview_Mapping.csv')
df['Judgements'] = df['Judgements'] + '.txt'
dic1 = df.set_index('Judgements')['Area.of.Law'].to_dict()

del df
len(dic1.keys())

df = pd.DataFrame()
path = r'/Users/batsukhbaatar/Desktop/Sample_Problem/Fixed_Judgements'

for file in os.listdir(path):
    with open(os.path.join(path, file), 'r', encoding = 'utf-8', errors = 'ignore') as infile:
        txt = infile.read()
        df = df.append([[txt, dic1[file]]], ignore_index = True)
        
df.head()

df[0] = df[0].apply(lambda x: x.replace('\n', ' '))
df.columns = ['Judgements', 'Class']

df_test = df.ix[df['Class'] == 'To be Tested', ]
df = df.ix[df['Class'] != 'To be Tested', ]

del file, path, txt

def preprocessor(text):
    text = re.sub('[<^>]+', ' ', text)
    text = re.sub('[\W]+', ' ', text.lower())
    return text

df['Judgements'] = df.loc[:, 'Judgements'].apply(preprocessor)

from nltk.stem.porter import PorterStemmer
porter = PorterStemmer()

def tokenizer_porter(text):
    return [porter.stem(word) for word in text.split()]


X_train = df.loc[:, 'Judgements'].values
y_train = df.loc[:, 'Class'].values
X_test = df_test.loc[:, 'Judgements'].values


from sklearn.grid_search import GridSearchCV
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(strip_accents = 'unicode', lowercase = True, preprocessor = None)


param_grid = [{'vect__ngram_range': [(1,2)], 'vect__stop_words': ['english'], 'vect__tokenizer': [tokenizer_porter], 'clf__penalty': ['l1', 'l2'], 'clf__C': [1.0, 10.0, 100.0]}]

lr_tfidf = Pipeline([('vect', tfidf), ('clf', LogisticRegression())])
gs_lr_tfidf = GridSearchCV(lr_tfidf, param_grid, scoring='accuracy', cv=5, verbose=1, n_jobs=-1)
gs_lr_tfidf.fit(X_train, y_train)

print('Best parameter set: %s ' % gs_lr_tfidf.best_params_)
print('CV Accuracy: %.3f' % gs_lr_tfidf.best_score_)   ### 63% accuracy
clf = gs_lr_tfidf.best_estimator_

clf.predict(X_test)
